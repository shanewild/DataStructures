// Name:   Shane Wild
// Class:   CS 3305/W03
// Term:   Spring 22
// Instructor:  Betty Kretlow
// Assignment:  8-BT
public class BST {
    //node class used for tree
    static class Node<E extends Comparable<E>> {
        E element;
        Node<E> left;
        Node<E> right;

        Node(E e) {
            this.element = e;
            left = null;
            right = null;

        }
    }
    public static class BinaryTree<E extends Comparable<E>>{
        Node root;
        Node parent;
        Node current;
        //gets largest depth,
        public int depth(Node node)
        {
            //base
            if (node == null)
                return -1;
            //finds depths recursively
            else
            {
                int lDepth = depth(node.left);
                int rDepth = depth(node.right);
                if (lDepth > rDepth)
                    return lDepth + 1;
                else
                    return rDepth + 1;
            }
        }
        public String max(Node node){
            if(root==null) return null;
            else{
                //finds largest node in left subtree
                if (root.left!=null)
                    current=root.left;
                while(current.right!=null){
                    current=current.right;
                }
                Object lmax=current.element;
                //finds largest node in right subtree
                current=root;
                while (current.right!=null){
                    current=current.right;
                }
                Object rmax=current.element;
                return"left max= "+lmax+" root= "+root.element+" right max= "+rmax;
            }
        }
        //I could not get this to work with generics and because of that I couldn't get average either.
//        Object sum(Node root)
//        {
//            if (root == null)
//                return 0.0;
//            return (root.element+ sum(root.left) + sum(root.right));
//        }
        boolean isBalanced(Node node) {
            int ldepth;
            int rdepth;
            if (node == null)
                return true;
            //uses depth method on both subtrees.
            ldepth = depth(node.left);
            rdepth = depth(node.right);
            // if every subtree is balanced(less than 1 difference in depth) return true
            if (Math.abs(ldepth - rdepth) <= 1 && isBalanced(node.left) && isBalanced(node.right))
                return true;
            return false;
        }
        public Boolean add( E value) {
            //if empty make new node at current
            if (root == null) {
                root=new Node((Comparable) value);
            }
            else {
                current = root;
                //finds where value should go
                while (current != null) {
                    if (value.compareTo((E) current.element) < 0) {
                        parent=current;
                        current=current.left;
                    }
                    else if (value.compareTo((E) current.element) > 0) {
                        parent=current;
                        current=current.right;
                    }
                    else return false;
                }
                //places value
                if (value.compareTo((E) parent.element)<0){
                    parent.left=new Node(value);
                }
                else{
                    parent.right=new Node(value);
                }
                return true;
            }
            return true;

        }
    }
//driver
    public static void main(String[] Args){
        BinaryTree bt1=new BinaryTree();
        int pre[] = {2, 1, 3};
        for (int x: pre){
            bt1.add(x);
        }
        System.out.println("bt1");
        System.out.println("This is a BST");
        System.out.println(bt1.depth(bt1.root));
        System.out.println(bt1.max(bt1.root));
        System.out.println(bt1.isBalanced(bt1.root) +"\n");

        BinaryTree bt2=new BinaryTree();
        int pre2[]={ 1, 2, 4, 8, 5, 9, 3, 6, 10, 11, 7, 12};
        for (int x: pre2){
            bt2.add(x);
        }
        System.out.println("bt2");
        System.out.println("This is a BST");
        System.out.println(bt2.depth(bt2.root));
        System.out.println(bt2.isBalanced(bt2.root)+"\n");

        BinaryTree bt3=new BinaryTree();
        double pre3[] = {0.185038, 0.394342, 0.291092, 0.289448, 0.101709, 0.0611125, 0.193208, 0.13517, 0.0404296, 0.410769, 0.0198583, 0.432688, 0.0674109, 0.151873, 0.14349, 0.286818, 0.071119, 0.170354, 0.0670367, 0.44319, 0.0682843, 0.270964, 0.369207, 0.461848, 0.427017, 0.377756, 0.0485934, 0.0667142, 0.108895, 0.153658, 0.00263633, 0.222634, 0.094924, 0.195702, 0.170448, 0.364803, 0.378102, 0.440015, 0.147172, 0.0208332, 0.340395, 0.131731, 0.275594, 0.390628, 0.317047, 0.108642, 0.393182, 0.307225, 0.159842, 0.292226, 0.126009, 0.363135, 0.183877, 0.228193, 0.449523, 0.042972, 0.462529};
        for (double x: pre3){
            bt3.add(x);
        }
        System.out.println("bt3");
        System.out.println("This is a BST");
        System.out.println(bt3.depth(bt3.root));
        System.out.println(bt3.max(bt3.root));
        System.out.println(bt3.isBalanced(bt3.root)+"\n");

        double pre4[] = {0.0548774, 0.0219107, 0.399846, 0.11906, 0.276626, 0.0025399, 0.0871276, 0.414861, 0.245851,  0.326767, 0.299142, 0.177023, 0.374845, 0.308614, 0.0240217, 0.372271, 0.455955, 0.0612401,  0.335461, 0.435828, 0.0312264, 0.0884601, 0.159796, 0.454999, 0.219714, 0.197132, 0.0369807,  0.11951, 0.241231, 0.413826, 0.184522, 0.0199605, 0.257216, 0.222754, 0.272094, 0.425897, 0.46714,  0.0668064, 0.132584, 0.305703, 0.359778, 0.368871, 0.203195, 0.204924, 0.258112, 0.488894, 0.18149,  0.0354453, 0.140185, 0.130067, 0.411766, 0.376441, 0.129284, 0.184723, 0.478379, 0.371205, 0.158867,  0.487457, 0.234737, 0.00210605, 0.340738, 0.356701, 0.349852, 0.450229, 0.148242, 0.393779,0.24513,};
        BinaryTree bt4=new BinaryTree();
        for (double x: pre4){
            bt4.add(x);
        }
        System.out.println("bt4");
        System.out.println("This is a BST");
        System.out.println(bt4.depth(bt4.root));
        System.out.println(bt4.max(bt4.root));
        System.out.println(bt4.isBalanced(bt4.root)+"\n");

        double pre5[] = {73.4985, 46.8521, 14.3886, 12.9232, 85.4859, 46.2981, 80.6752, 88.638, 4.35911, 58.6892, 84.1117, 40.5937, 68.0229, 61.445, 34.0708, 35.3704, 18.5848, 96.9019, 92.7016, 19.209, 23.4396, 91.8773, 30.3747, 77.7968, 61.8916, 88.8224, 53.4489, 95.265, 60.4812, 39.0774, 55.1742, 26.1048, 94.9729, 25.1438, 48.3416, 53.3558, 68.7762, 8.53748, 18.4463, 74.2923, 24.9243, 43.8824, 85.6614, 85.3082, 44.935, 76.962, 11.221, 49.8271, 2.35539, 71.8307, 89.2918, 8.40491, 61.8023, 21.7674, 14.0364, 64.5149, 69.6479, 39.7651, 14.1298, 56.2528, 34.85, 14.2238, 9.7598, 86.5377, 25.5708, 27.0339, 17.4183, 77.4411, 92.9552, 67.7474, 24.8433, 39.1404, 57.3637, 86.793, 79.4382, 71.3109, 29.2685, 3.97165, 49.9699, 0.527265, 56.5742, 76.9849, 97.5207, 71.6777, 70.8829, 35.2898, 88.0029, 5.02091, 5.96275, 75.6205, 98.4684, 96.2908, 63.8659, 77.8282, 75.5512, 17.7396, 67.5396, 28.6981, 12.2225, 38.7088, 16.4708, 92.5059, 82.1537, 94.3072, 14.5779, 51.7565, 43.5969, 72.9606, 1.56508, 9.78005, 18.9848, 45.6385, 13.969, 92.3696, 26.3461, 56.757, 91.198, 78.8685, 37.0075, 73.8415, 58.2184, 13.6569, 57.8895, 96.2489, 97.1185, 64.7039, 41.3069, 27.7655, 31.9683, 55.1188, 52.3135, 66.884, 83.9292, 58.4453, 78.1257, 1.43965, 44.5268, 29.4732, 85.4034, 3.31023, 8.08591, 54.1928, 41.5081, 40.9289, 43.1932, 77.7617, 9.87374, 8.39879, 20.0876, 47.2552, 27.5136, 26.8304, 45.1827, 86.6642, 13.2579, 72.1408, 33.1812, 9.41366, 89.4363, 76.2227, 72.4771, 34.8774, 16.4201, 30.744, 31.1552, 77.9852, 24.4572, 24.8563, 70.9599, 65.9745, 16.3165, 86.4168, 2.51523, 42.6039, 55.5835, 32.5931, 11.7524, 33.165, 87.6593, 6.77963, 44.2723, 16.1713, 36.9947, 43.9856, 60.1331, 14.8278, 95.1717, 8.84246, 6.33744, 38.8297, 79.0969, 33.7647, 3.20686, 12.2841, 11.0536, 28.8245, 11.1387, 14.6653, 43.1258, 9.30967, 49.7818, 33.2852, 23.1558, 66.5455, 33.6988, 69.4424, 1.39044, 94.2626, 57.0549, 40.6015, 99.6742, 54.4458, 79.7501, 92.6126, 10.4309, 50.9208, 67.283, 10.87, 24.4578, 28.0051, 21.931, 69.5968, 11.3731, 32.7579, 11.7431, 54.8151, 24.3329, 65.0133, 50.714, 68.4945, 38.0619, 99.3297, };
        BinaryTree bt5=new BinaryTree();
        for (double x: pre5){
            bt5.add(x);
        }
        System.out.println("bt5");
        System.out.println("This is a BST");
        System.out.println(bt5.depth(bt5.root));
        System.out.println(bt5.max(bt5.root));
        System.out.println(bt5.isBalanced(bt5.root)+"\n");

        double pre6[] = {4.3306, 3.11497, 52.1211, 19.2026, 9.15248, 72.7208, 63.34, 46.2895, 64.0222, 63.4586, 89.066, 6.59548, 77.8256, 58.3726, 56.1533, 9.88477, 16.6032, 40.6564, 57.7543, 47.04, 49.518, 10.2645, 31.9497, 43.5922, 41.82, 44.8016, 64.523, 49.381, 0.108398, 69.0608, 61.5658, 72.6547, 76.473, 13.687, 53.4604, 53.2735, 65.0492, 5.24228, 3.02872, 15.5814, 98.9001, 2.76773, 75.5567, 16.822, 44.2757, 38.2792, 57.4494, 21.5026, 34.1031, 85.1352, 66.3168, 85.1616, 88.2336, 1.42473, 54.6989, 79.3257, 55.4436, 16.0068, 70.3067, 58.1328, 94.856, 32.8399, 53.1079, 66.8505, 68.542, 17.2608, 95.6259, 98.8123, 86.1839, 24.7786, 60.8085, 78.4745, 83.0666, 47.5039, 20.8264, 99.1416, 53.0747, 73.3418, 92.6313, 59.81, 47.517, 58.8448, 25.433, 93.6073, 76.5438, 58.5274, 76.332, 58.2736, 51.0678, 73.0445, 22.4902, 41.7751, 92.9945, 94.4361, 75.4164, 43.6473, 17.5823, 85.6195, 16.3857, 0.697784, 53.8455, 18.7113, 7.07285, 22.9233, 27.7605, 34.3872, 93.5078, 12.7034, 12.428, 12.5186, 89.1598, 30.8344, 12.6001, 70.9641, 67.1992, 98.9208, 85.6052, 66.1593, 85.4261, 51.4584, 7.17516, 77.659, 4.9388, 32.3939, 6.3941, 13.7492, 85.891, 49.4464, 13.7305, 55.0002, 92.2876, 3.86547, 54.9294, 9.50294, 90.9076, 80.35, 39.546, 59.6445, 37.3981, 98.767, 16.7178, 11.0163, 62.2525, 78.6217, 3.21555, 37.2375, 31.2927, 22.3803, 63.1045, 74.0793, 68.7142, 10.6833, 24.3944, 90.4101, 1.71769, 8.02979, 6.38096, 2.14237, 64.0517, 63.2271, 34.2695, 92.1689, 33.2269, 76.1078, 62.6672, 46.2591, 49.4012, 16.809, 65.7016, 9.69359, 25.5063, 43.9266, 1.18908, 32.3331, 98.5672, 12.1865, 20.0763, 3.12408, 5.46274, 41.3231, 25.0598, 96.6987, 72.2831, 52.1451, 46.4364, 27.7495, 45.812, 75.9405, 41.617, 59.5082, 45.6461, 95.2493, 6.25856, 58.6297, 74.697, 84.2688, 28.984, 71.7642, 41.835, 28.154, 18.9906, 4.40006, 9.4568, 28.1405, 29.3636, 10.7408, 6.98748, 66.0188, 90.6344, 41.9562, 14.5307, 11.5635, 89.5946, 23.0237, 45.9363, 75.6238, 93.5014, 77.8963, 56.4939, 77.0929, 94.5823, 88.1086, 65.4029, 25.7382, 59.1488, 59.8223, 64.396, 66.7175, 46.0344, 92.164, 24.2735, 16.6828, 24.2439, 52.6865, 3.56021, 50.0308, 26.3071, 81.4128, 39.989, 70.8773, 65.527, 21.5898, 41.3304, 41.873, 3.93746, 52.0233, 26.5959, 23.6059, 64.2446, 88.683, 17.5396, 71.658, 5.03409, 2.55273, 91.957, 67.323, 98.6804, 40.4973, 38.9496, 34.861, 36.6984, 12.0177, 76.7579, 95.5737, 70.404, 38.2157, 26.902, 74.1656, 97.7712, 30.3019, 31.2271, 66.2011, 93.2353, 12.9999, 70.2584, 89.6909, 95.7818, 16.5458, 78.1867, 16.0277, 78.0037, 26.4832, 40.4183, 15.3044, 77.8104, 19.6337, 32.7615, 94.0666, 18.9886, 22.9197, 94.3013, 30.3161, 67.2075, 75.7983, 10.2394, 49.4252, 25.8124, 87.2795, 81.1131, 97.1218, 66.8273, 94.2261, 30.8429, 55.5226, 52.0467, 26.2642, 90.1831, 56.3434, 34.6705, 27.8279, 50.1253, 25.934, 42.9253, 65.1732, 65.9714, 15.9634, 73.6213, 63.2285, 6.96224, 59.383, 43.4474, 20.7372, 56.3122, 33.6857, 27.289, 59.092, 52.1098, 58.131, 10.4592, 81.6249, 83.0521, 52.8482, 24.4848, 4.97842, 53.0653, 69.1938, 19.629, 27.6403, 67.796, 80.4294, 60.8379, 5.01791, 82.6133, 95.2674, 40.1232, 13.3362, 23.2824, 21.3787, 14.4259, 14.454, 34.1246, 87.6847, 94.1204, 42.5271, 3.4354, 20.0222, 77.4832, 90.8075, 70.3495, 70.7645, 67.0948, 29.6444, 23.8627, 53.175, 34.4695, 46.2201, 5.7728, 3.02326, 90.8005, 87.4691, 54.9362, 50.9303, 27.6714, 77.9232, 57.6504, 17.3648, 96.5156, 81.7828, 55.6145, 87.012, 90.7541, 84.6597, 17.2222, 35.4683, 13.4285, 43.3852, 81.2681, 55.7406, 99.7847, 90.4437, 39.583, 10.8738, 7.36905, 99.8854, 48.8976, 48.9693, 83.8957, 73.2433, 25.6182, 77.0518, 63.1467, 88.8492, 95.8964, 28.5822, 38.221, 52.174, 4.77203, 93.6656, 11.6605, 63.7222, 59.1314, 19.4204, 90.4705, 72.525, 49.8119, 80.9291, 71.2698, 65.6535, 17.1528, 37.0476, 61.6957, 89.5297, 94.4161, 31.0261, 31.8833, 50.4717, 65.1412, 77.3572, 68.8235, 23.359, 78.8921, 21.4574, 1.1667, 88.6968, 34.7806, 51.5997, 12.9253, 25.4414, 64.9202, 45.4465, 79.7303, 41.7061, 3.63856, 58.8326, 3.86986, 40.1361, 6.7423, 65.0942, 80.4269, 15.3181, 88.8738, 74.9713, 87.0321, 71.2343, 48.5555, 73.0087, 33.0247, 16.2146, 32.2157, 62.6832, 42.5497, 86.6023, 45.424, 42.3724, 66.1002, 7.38608, 22.0806, 18.0688, 18.1134, 45.7587, 54.6867, 53.1091, 57.3116, 43.0246, 13.9631, 99.9515, 73.1185, 69.6596, 40.7006, 21.8413, 52.5498, 4.93533, 26.4593, 45.1082, 31.7518, 59.6728, 8.20397, 90.7406, 52.2254, 85.81, 22.5373, 75.4221, 11.3923, 21.2877, 72.5242, 81.3971, 72.7272, 15.1081, 7.24306, 99.2201, 84.3698, 38.8545, 6.48558, 51.107, 37.8301, 79.3367, 28.6445, 87.3042, 66.8714, 8.74354, 51.0139, 61.312, 10.6094, 89.3664, 25.175, 13.7968, 79.07, 52.8295, 75.1803, 98.5454, 41.8793, 88.8851, 20.7751, 12.5438, 93.7275, 7.75336, 30.7177, 88.3598, 41.7025, 4.83537, 70.8685, 79.2305, 60.3073, 30.9591, 28.3242, 8.33881, 73.7618, 2.2792, 16.9939, 22.5933, 63.2235, 68.3035, 36.5947, 20.3672, 19.718, 12.4798, 96.1939, 70.0533, 97.9305, 34.1889, 0.896365, 67.959, 94.8617, 65.6928, 89.843, 15.3168, 44.6526, 68.4413, 36.8463, 2.23661, 1.50914, 0.188576, 74.5659, 69.1601, 16.3727, 46.512, 35.6111, 42.8007, 54.2191, 1.51288, 73.0345, 62.7236, 9.55846, 57.8909, 56.1013, 94.7042, 9.32641, 72.1323, 38.5759, 93.581, 82.3206, 5.73557, 18.7484, 71.5705, 53.5229, 8.29941, 17.4495, 71.62, 37.3943, 90.8382, 7.24212, 36.4869, 2.35933, 37.4873, 99.3543, 65.7658, 3.39147, 80.3566, 75.5212, 63.8994, 74.7871, 16.0648, 15.8157, 46.327, 58.8434, 63.9098, 17.7821, 93.2131, 35.5327, };
        BinaryTree bt6=new BinaryTree();
        for (double x: pre6){
            bt6.add(x);
        }
        System.out.println("bt6");
        System.out.println("This is a BST");
        System.out.println(bt6.depth(bt6.root));
        System.out.println(bt6.max(bt6.root));
        System.out.println(bt6.isBalanced(bt6.root)+"\n");


    }
}